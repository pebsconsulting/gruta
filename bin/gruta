#!/usr/bin/perl

use strict;
use warnings;

use File::Temp;

use Gruta;
use Gruta::Source::DBI;
use Gruta::Source::FS;

my $src_str = arg();
my $cmd = arg();

my $src = new_source($src_str);
my $g = Gruta->new( sources => $src );

if ($cmd eq 'copy') {
	my $new_src = arg();
	my $dst = new_source( $new_src );

	$dst->create();

	$g->transfer_to_source( $dst );
}
elsif ($cmd eq 'topics') {
	foreach my $t ($g->topics()) {
		print $t, "\n";
	}
}
elsif ($cmd eq 'topic') {
	my $topic_id = arg();

	my $topic = $g->topic($topic_id);

	foreach my $f ($topic->afields()) {
		print $f, ': ', ($topic->get($f) || ''), "\n";
	}
}
elsif ($cmd eq 'stories') {
	my $topic_id = arg();

	foreach my $s ($g->stories($topic_id)) {
		print $s, "\n";
	}
}
elsif ($cmd eq 'story') {
	my $topic_id	= arg();
	my $id		= arg();

	print get_story($topic_id, $id);
}
elsif ($cmd eq 'edit_story') {
	my $topic_id	= arg();
	my $id		= arg();

	my $fh = File::Temp->new();
	print $fh get_story($topic_id, $id);
	my $fn = $fh->filename();
	$fh->close();

	my $mtime = (stat($fn))[9];
	system('$EDITOR ' . $fn);

	if ($mtime != (stat($fn))[9]) {
		save_story($topic_id, $id, $fn);
	}
}
elsif ($cmd eq 'filter_story') {
	my $topic_id	= arg();
	my $id		= arg();
	my $filter_cmd	= arg();

	my $fhr = File::Temp->new();
	print $fhr get_story($topic_id, $id);
	my $fnr = $fhr->filename();
	$fhr->close();

	my $fhw = File::Temp->new();
	my $fnw = $fhw->filename();
	$fhw->close();

	system("$filter_cmd < $fnr > $fnw");

	save_story($topic_id, $id, $fnw);
}
elsif ($cmd eq 'create') {
	# do nothing
	1;
}
elsif ($cmd eq 'tags') {
	foreach my $t ($g->tags()) {
		print join(' ', @{$t}), "\n";
	}
}
elsif ($cmd eq 'stories_by_date') {
	my $topics	= arg();
	my $num		= arg();
	my $offset	= arg();

	if ($topics) {
		$topics = [ split(':', $topics) ];
	}

	foreach my $s ($g->stories_by_date( $topics,
		num => $num, offset => $offset) ) {
		print join(' ', @{$s}), "\n";
	}
}
else {
	usage();
}

exit 0;


sub arg
{
	if (@ARGV) {
		return shift(@ARGV);
	}

	usage();
}


sub usage
{
	print "Usage: $0 {source} {command} [args]\n";

	exit 1;
}

sub new_source
{
	my $src_str = shift;
	my $src;

	if ($src_str =~ /^dbi:/) {
		$src = Gruta::Source::DBI->new( string => $src_str );
	}
	else {
		$src = Gruta::Source::FS->new( path => $src_str );
	}

	return $src;
}

sub get_story
{
	my $topic_id	= shift;
	my $id		= shift;
	my @r		= ();

	my $story = $g->story($topic_id, $id);

	foreach my $f ($story->fields()) {
		if ($f ne 'content') {
			push (@r, $f . ': ' . ($story->get($f) || ''));
		}
	}

	push(@r, 'tags: ' . join(', ', $story->tags()));
	push(@r, '');
	push(@r, $story->get('content'));
	push(@r, '');

	return join("\n", @r);
}


sub save_story
{
	my $topic_id	= shift;
	my $id		= shift;
	my $fn		= shift;

	open F, $fn or die "Can't open $fn";

	my $story = undef;

	if ($id) {
		$story = $g->story($topic_id, $id);
	}
	else {
		$story = Gruta::Data::Story->new (
			topic_id	=> $topic_id,
			id		=> $id
		);
	}

	while (<F>) {
		chomp();

		last if /^$/;

		my ($key, $value) = (/^(\w+):\s*(.*)$/);

		if ($key eq 'tags') {
			$story->tags(split(/,\s*/, $value));
		}
		else {
			$story->set($key, $value);
		}
	}

	my $c = join('', <F>);
	close F;

	$story->set('content', $c);

	if ($story->source()) {
		$story->save();
	}
	else {
		$g->insert_story($story);
	}
}

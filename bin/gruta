#!/usr/bin/perl

use strict;
use warnings;

use Gruta;
use Gruta::Source::DBI;
use Gruta::Source::FS;

my $usage = 0;

my $g;
my $src;
my $cmd;
my $src_str;

$cmd = shift(@ARGV) or usage();
$src_str = shift(@ARGV) or usage();

$src = new_source($src_str);
$g = Gruta->new( sources => $src );

if ($cmd eq 'copy') {
	my $new_src = shift(@ARGV) or usage();
	my $dst = new_source( $new_src );

	$dst->create();

	$g->transfer_to_source( $dst );
}
elsif ($cmd eq 'topics') {
	foreach my $t ($g->topics()) {
		print $t, "\n";
	}
}
elsif ($cmd eq 'topic') {
	my $topic_id = shift(@ARGV) or usage();

	my $topic = $g->topic($topic_id);

	foreach my $f ($topic->afields()) {
		print $f, ': ', ($topic->get($f) || 'UNDEF'), "\n";
	}
}
elsif ($cmd eq 'edit_story') {
	my $topic_id	= shift(@ARGV) or usage();
	my $id		= shift(@ARGV) or usage();

	my $story = $g->story($topic_id, $id);

	foreach my $f ($story->afields()) {
		if ($f ne 'content') {
			print $f, ': ', ($story->get($f) || 'UNDEF'), "\n";
		}
	}

	print "\n";

	print $story->get('content'), "\n";
}
elsif ($cmd eq 'create') {
	# do nothing
	1;
}
elsif ($cmd eq 'tags') {
	foreach my $t ($g->tags()) {
		print join(', ', @{$t}), "\n";
	}
}
else {
	usage();
}

exit 0;


sub usage
{
	print "Usage: $0 {cmd} {source}\n";
	exit 1;
}

sub new_source
{
	my $src_str = shift;
	my $src;

	if ($src_str =~ /^dbi:/) {
		$src = Gruta::Source::DBI->new( string => $src_str );
	}
	else {
		$src = Gruta::Source::FS->new( path => $src_str );
	}

	return $src;
}
